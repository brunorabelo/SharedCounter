image: docker:20

services:
  - docker:dind

stages:
  - build
  - release
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  TAG_LATEST: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:latest
  TAG_COMMIT: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_NAME:$CI_COMMIT_SHA


before_script:
  #  - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  - export IMAGE=$CI_REGISTRY_IMAGE
  - export COMMIT_IMAGE=$IMAGE:$CI_COMMIT_SHA
  - export REALEASE_IMAGE=${IMAGE}:latest
  - apk add --no-cache openssh-client bash
  - chmod +x ./setup_env.sh
  - bash ./setup_env.sh
  - docker login -u $CI_REGISTRY_USER -p $CI_BUILD_TOKEN $CI_REGISTRY

build:
  stage: build
  script:
    - docker pull $TAG_LATEST || true
#    - docker-compose -f docker/compose/docker-compose.ci.yml build
    - docker build --pull --cache-from $TAG_LATEST --tag $TAG_COMMIT -f Dockerfile.ci .
    - docker push $TAG_COMMIT

#test:
#  stage: test
#  script:
#    - docker pull $IMAGE:web
#    - docker pull $IMAGE:nginx
##    - docker-compose -f docker/compose/docker-compose.ci.yml run --rm web flake8
#    - docker-compose -f docker/compose/docker-compose.ci.yml run web coverage run -m pytest
#    - docker-compose -f docker/compose/docker-compose.ci.yml run --rm web coverage html
#    - docker-compose -f local.yml run --rm web /bin/sh -c "cd docs && apk add make && make html"
#    - docker-compose -f docker/compose/docker-compose.ci.yml run web coverage report
#  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"



# Here, the goal is to tag the "master" branch as "latest"
Push latest:
  stage: release
  only:
    # Only "master" should be tagged "latest"
    - main
  script:
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $TAG_COMMIT
    # Then we tag it "latest"
    - docker tag $TAG_COMMIT $TAG_LATEST
    # Annnd we push it.
    - docker push $TAG_LATEST

# Finally, the goal here is to Docker tag any Git tag
# GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
Push tag:
  stage: release
  only:
    # We want this job to be run on tags only.
    - tags
  script:
    - docker pull $TAG_COMMIT
    - docker tag $TAG_COMMIT $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME

deploy:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - cat $ID_RSA > ~/.ssh/id_rsa
    #    - cat ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - chmod +x ./docker/bin/deploy.sh
    - cat ./.env
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "mkdir -p /home/$SERVER_USER/app"
    - scp  -o StrictHostKeyChecking=no -r ./.env $SERVER_USER@$SERVER_IP:/home/$SERVER_USER/app
    - bash ./docker/bin/deploy.sh
  only:
    - main



#before_script:
#  #  - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
#  - export IMAGE=$CI_REGISTRY_IMAGE
#  - export WEB_IMAGE=${IMAGE}_web
#  - export NGINX_IMAGE=${IMAGE}_nginx
#  - export CI_COMMIT=$CI_COMMIT_SHA
#  - apk add --no-cache openssh-client bash
#  - chmod +x ./setup_env.sh
#  - bash ./setup_env.sh
#  - docker login -u $CI_REGISTRY_USER -p $CI_BUILD_TOKEN $CI_REGISTRY
#
#build:
#  stage: build
#  script:
#    - docker pull $WEB_IMAGE:latest || true
#    - docker-compose -f docker/compose/docker-compose.ci.yml build
#    - docker push $WEB_IMAGE:$CI_COMMIT_SHA
#    - docker push $NGINX_IMAGE:$CI_COMMIT_SHA
