image:
  name: docker/compose:1.29.2
  entrypoint: [""]

services:
  - docker:dind

stages:
  - build
  - test
  - release
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2
  IMAGE: $CI_REGISTRY_IMAGE
  LATEST_WEB_IMAGE_TAG: $IMAGE/web:latest
  REALEASE_WEB_IMAGE: $IMAGE/web:$CI_COMMIT_REF_NAME
  LATEST_NGINX_IMAGE_TAG: $IMAGE/nginx:latest
  COMMIT_NGINX_IMAGE_TAG: $IMAGE/nginx:$CI_COMMIT_SHA
  REALEASE_NGINX_IMAGE: $IMAGE/nginx:$CI_COMMIT_REF_NAME


before_script:
#  - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  - export IMAGE=$IMAGE
  - export LATEST_WEB_IMAGE_TAG=$LATEST_WEB_IMAGE_TAG
  - export COMMIT_WEB_IMAGE_TAG=$IMAGE/web:$CI_COMMIT_SHA
  - export REALEASE_WEB_IMAGE=$REALEASE_WEB_IMAGE
  - export LATEST_NGINX_IMAGE_TAG=$LATEST_NGINX_IMAGE_TAG
  - export COMMIT_NGINX_IMAGE_TAG=$COMMIT_NGINX_IMAGE_TAG
  - export REALEASE_NGINX_IMAGE=$REALEASE_NGINX_IMAGE
  - apk add --no-cache openssh-client bash
  - chmod +x ./setup_env.sh
  - bash ./setup_env.sh
  - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY

build:
  stage: build
  script:
    - docker pull $LATEST_WEB_IMAGE_TAG || true
    - docker pull $LATEST_NGINX_IMAGE_TAG || true
    - docker-compose -f docker/compose/docker-compose.ci.yml build
    - docker push $COMMIT_WEB_IMAGE_TAG
    - docker push $COMMIT_NGINX_IMAGE_TAG

test:
  stage: test
  script:
    - docker pull $IMAGE:web
    - docker pull $IMAGE:nginx
    - docker-compose -f docker/compose/docker-compose.ci.yml build
    #    - docker-compose -f docker/compose/docker-compose.ci.yml run --rm web flake8
    - docker-compose -f docker/compose/docker-compose.ci.yml run web coverage erase
    - docker-compose -f docker/compose/docker-compose.ci.yml run web coverage run manage.py test
    - docker-compose -f docker/compose/docker-compose.ci.yml run web python manage.py test
#    - docker-compose -f docker/compose/docker-compose.ci.yml run web coverage run -m pytest
#    - docker-compose -f docker/compose/docker-compose.ci.yml run web coverage run -m pytest
    - docker-compose -f docker/compose/docker-compose.ci.yml run --rm web coverage html
    - docker-compose -f local.yml run --rm web /bin/sh -c "cd docs && apk add make && make html"
    - docker-compose -f docker/compose/docker-compose.ci.yml run web coverage report
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"

Push latest:
  stage: release
  only:
    # Only "master" should be tagged "latest"
    - main
  script:
    # Because we have no guarantee that this job will be picked up by the same runner
    # that built the image in the previous step, we pull it again locally
    - docker pull $COMMIT_WEB_IMAGE_TAG
    - docker pull $COMMIT_NGINX_IMAGE_TAG
    # Then we tag it "latest"
    - docker tag $COMMIT_WEB_IMAGE_TAG $LATEST_WEB_IMAGE_TAG
    - docker tag $COMMIT_NGINX_IMAGE_TAG $LATEST_NGINX_IMAGE_TAG
    # Annnd we push it.
    - docker push $LATEST_WEB_IMAGE_TAG
    - docker push $LATEST_NGINX_IMAGE_TAG

## Finally, the goal here is to Docker tag any Git tag
## GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
#Push tag:
#  variables:
#    GIT_STRATEGY: none
#  stage: release
#  only: #Finally, the goal here is to Docker tag any Git tag
#    # GitLab will start a new pipeline everytime a Git tag is created, which is pretty awesome
#    - tags
#  script:
#    # Because we have no guarantee that this job will be picked up by the same runner
#    # that built the image in the previous step, we pull it again locally
#    - docker pull $COMMIT_WEB_IMAGE_TAG
#    - docker pull $COMMIT_NGINX_IMAGE_TAG
#    # Then we tag it "latest"
#    - docker tag $COMMIT_WEB_IMAGE_TAG $REALEASE_WEB_IMAGE
#    - docker tag $COMMIT_NGINX_IMAGE_TAG $REALEASE_NGINX_IMAGE
#    # Annnd we push it.
#    - docker push $REALEASE_WEB_IMAGE
#    - docker push $REALEASE_NGINX_IMAGE

deploy:
  stage: deploy
  script:
    - mkdir -p ~/.ssh
    - cat $ID_RSA > ~/.ssh/id_rsa
#    - cat ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - chmod +x ./docker/bin/deploy.sh
#    - cat ./.env
    - ssh -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "mkdir -p /home/$SERVER_USER/app"
    - scp  -o StrictHostKeyChecking=no -r ./.env ./.env.db ./docker/compose/docker-compose.prod.yml $SERVER_USER@$SERVER_IP:/home/$SERVER_USER/app
    - bash ./docker/bin/deploy.sh
  only:
    - main
  when: manual
